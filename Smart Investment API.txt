from fastapi import FastAPI, Depends, HTTPException
import yfinance as yf
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler
import firebase_admin
from firebase_admin import credentials, auth
import stripe
import os
from datetime import datetime

app = FastAPI()

# Initialize Firebase Admin SDK
cred = credentials.Certificate("firebase_credentials.json")  # Replace with your Firebase credentials file
firebase_admin.initialize_app(cred)

# Stripe API Key (Set in environment variables)
stripe.api_key = os.getenv("STRIPE_SECRET_KEY")

# Function to fetch stock data
def fetch_stock_data(stock, period="1y"):
    try:
        data = yf.download(stock, period=period)
        if data.empty:
            raise HTTPException(status_code=404, detail=f"No data found for {stock}")
        return data
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# LSTM Model Preparation
def prepare_lstm_data(data, sequence_length=50):
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data['Close'].values.reshape(-1, 1))
    
    x, y = [], []
    for i in range(sequence_length, len(scaled_data)):
        x.append(scaled_data[i-sequence_length:i, 0])
        y.append(scaled_data[i, 0])
    
    return np.array(x), np.array(y), scaler

# Function to load or train LSTM model
def build_lstm_model(input_shape):
    model = Sequential([
        LSTM(units=50, return_sequences=True, input_shape=(input_shape[1], 1)),
        Dropout(0.2),
        LSTM(units=50, return_sequences=False),
        Dropout(0.2),
        Dense(units=25),
        Dense(units=1)
    ])
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# API to predict stock prices using LSTM
@app.get("/predict/{stock}")
def predict_stock(stock: str):
    data = fetch_stock_data(stock)
    x, y, scaler = prepare_lstm_data(data)
    x = np.reshape(x, (x.shape[0], x.shape[1], 1))
    
    model_file = f"models/{stock}_lstm.h5"
    if os.path.exists(model_file):
        model = load_model(model_file)
    else:
        model = build_lstm_model(x.shape)
        model.fit(x, y, epochs=5, batch_size=16, verbose=0)
        model.save(model_file)
    
    last_sequence = x[-1].reshape(1, x.shape[1], 1)
    predicted_price_scaled = model.predict(last_sequence)[0][0]
    predicted_price = scaler.inverse_transform([[predicted_price_scaled]])[0][0]
    
    return {"stock": stock, "predicted_price": predicted_price}

# Firebase Authentication Middleware
def get_current_user(token: str):
    try:
        decoded_token = auth.verify_id_token(token)
        return decoded_token['uid']
    except:
        raise HTTPException(status_code=401, detail="Invalid or expired token")

# API to limit free searches per user
@app.get("/limit-check")
def check_free_limit(token: str = Depends(get_current_user)):
    user = auth.get_user(token)
    free_searches = user.custom_claims.get("free_searches", 5)
    if free_searches > 0:
        auth.set_custom_user_claims(token, {"free_searches": free_searches - 1})
        return {"remaining_searches": free_searches - 1}
    else:
        raise HTTPException(status_code=403, detail="Free limit reached. Please upgrade to premium.")

# Stripe Payment API
@app.post("/create-checkout-session")
def create_checkout_session():
    try:
        session = stripe.checkout.Session.create(
            payment_method_types=["card"],
            line_items=[
                {
                    "price_data": {
                        "currency": "usd",
                        "product_data": {"name": "Premium Stock Analysis Subscription"},
                        "unit_amount": 499 * 100,
                    },
                    "quantity": 1,
                }
            ],
            mode="subscription",
            success_url="https://yourapp.com/success",
            cancel_url="https://yourapp.com/cancel",
        )
        return {"checkout_url": session.url}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# Health Check API
@app.get("/health")
def health_check():
    return {"status": "API is running smoothly"}
